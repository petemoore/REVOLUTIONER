INFORMAL REQUIREMENTS BRAINSTORMING

- first version must manage scripts with strict oracle sql statements (no PL/SQL) separated by ";"
- all configuration in a single config.yaml file
- no need of a REVOLUTIONER_HOME: revolutioner will use by default
  the config.yaml file in the same dir; it will be possible to 
  specify a different config.yaml file

example of config.yaml content (not yet in yaml format!):
  BP
    #directory containing migration scripts etc., equivalent to the db_oracle folder used by DMT
    revolutionerFolder: /home/lexington/steele/../revolutionerOracle
    #users info section
    mode: sys/nosys; if sys specified, sys credentials are mandatory
    users:
      oracle connection details (for all users): .....
      user1:
        oracleusername
        oraclepassword
      user2: 
        --
        --
      system:
        actualUsername
        actualpassword
  NGP
    ...

Example of revolutionerFolder:

revolutioner/
  { revolutioner.yaml or revolutioner.properties:
    -> the product name
    -> the required version of the database
    -> the alias of the user to be used for revolutioner metadata
  }
  migrations/
    0_initialSetup/
        01_system.sql    --> script to create users and tablespaces = version 0
    0_to_version_1/     -- 0 to database version_1
        01_user1.sql     
        02_user1.sql
        03_user2.sql 
    version_1_to_version_2/
        01_system.sql
        02_user1.sql
  
  complianceTests/
    version_1/
      user1.ctf
      user2.
      01.py (python test dinamically loaded, a standard interface must be defined)
      02.py
    version_2/
      default.ctf
      01.py
      02.py
   
Example of usage:

revolutioner.py initialize BP: 
sys mode: executes 0_initialSetup and creates the revolutioner tables and sequences
normal mode: assumes existing user and only initialises revolutioner database objects

revolutioner.py migrate: finds path and executes migration
sys mode: all scripts
normal mode: does not execute sys scripts

revolutioner.py drop BP:
  sys mode:  drops all users referenced in configuration and existing
  normal mode: connects to each users and drop all objects

revolutioner.py create BP 
                          drop + initialize + migrate to desired version

revolutioner.py check BP: executes compliance tests for the existing database and 

TESTING
Integration tests wit database access (easily accessible configuration, in a single location; no hardcoded reference!)

IT
  allIntegrationTests.py (calls all of them)
  TEST1/
    test.py
    ...
  TEST2/
  TEST3

Unit tests with no database access

LOGGING
using standard python logging mechanisms
                            
STARTING POINTS FOR CODING

classes to read the revolutionerFolder, validate it, validate script names
path finder: given source and target version, find a path with the existing migrations, detect loops
classes to read main config.yaml file
classes to execute sql statements using cx_oracle

MANAGEMENT OF PARAMETERS
=====================================================
Revolutioner Command Line Tool will receive parameters starting with the '-' character;

Each parameter is defined by two numbers:
   - the number of mandatory arguments it receives (which are always at the beginning of the arguments list) 
   - the number of optional parameters (*) which can follow the initial mandatory parameters
    
EXAMPLES
   p1(1,3): requires at least an argument, and after that up to three optional arguments can be provided
         EXAMPLES: 
           VALID: revolutioner.py -p1 'mandatory' 
           VALID: revolutioner.py -p1 'mandatory' 'optional1'
           VALID: revolutioner.py -p1 'mandatory' 'optional1' 'optional2'
           VALID: revolutioner.py -p1 'mandatory' 'optional1' 'optional2' 'optional3'
           INVALID (missing mandatory argument): revolutioner.py -p1 
           INVALID (too many arguments): revolutioner.py -p1 a b c d e
   p2(0,1): can be provided 0 arguments or 1 optional one
   p3(1,*): 1 mandatory argument, any optional parameters
   p4(0,0): NO arguments (this kind of parameter is called FLAG) 
   



THE FIRST PARAMETER
the first parameter provided to the tool is called the "action" parameter, which defines the
operation revolutioner is asked to perform;
The "action" parameter is exceptional by virtue of the following two rules which apply to it only:
  1) it MUST be the first one provided in the command line
  2) it CAN be specified without the starting '-' character

If no action parameter is provided, revolutioner will behave as if the "help" action parameter had been provided

examples:

$revolutioner.py drop BP 
                 ^
             action parameter
   
$revolutioner.py create BP -p1 a1 a2
                  ^
             action parameter  
$revolutioner.py migrate BP version_4
                   ^
             action parameter   

$revolutioner.py help migrate

command line parameters/arguments validation:
For each action parameter, some dependency/compatibility/incompatibility rules can be defined for
parameters:

SUPPORTED PARAMETERS (COMPATIBILITIES):
action1: p1, p2, p3
action2: p5, p6
DEPENDENCIES:
(p1) -> (p2) if p1 is in the command line, p2 is required; if p1 is     there 
			 but p2 is not, the command line is not valid			(p1,p2)-> (p3)   if p1 and p2 are in the command line, p3 is required as well;
(p5)->(p6 and p7)if p5 is there, p6 AND p7 are also required
(p5)->(p6 or p7) if p5 is there, at least one between p6  p7 are also required
INCOMPATIBILITIES (MUTUAL EXCLUSION):
(p1):(p2)    if p1 is there, p2 cannot be there
(p1,p2):(p3) if p1 and p2 are there, p3 cannot be there